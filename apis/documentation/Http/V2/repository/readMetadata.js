'use strict';

const semver = require('semver');

const runtimeVersions = require('../../../../../documentation/versions-autogenerated.json');

let metadata;

const slugify = function (text) {
  if (typeof text === 'string') {
    return text.toLowerCase().replace(/ /g, '-').
      replace(/[^A-Za-z0-9-]/g, '');
  }

  if (Array.isArray(text)) {
    const items = text;

    return items.map(item => {
      if (item.children) {
        return { ...item, slug: slugify(item.title), children: slugify(item.children) };
      }

      return { ...item, slug: slugify(item.title) };
    });
  }

  throw new Error('Invalid operation.');
};

const readMetadata = async function () {
  if (metadata) {
    return metadata;
  }

  metadata = {
    name: 'wolkenkit Documentation',
    baseUrl: 'https://docs.wolkenkit.io',
    navigation: {},
    versions: {}
  };

  /* eslint-disable global-require */
  runtimeVersions.forEach(runtimeVersion => {
    const metadataForVersion = require(`../../../../../documentation/${runtimeVersion}/metadata`);

    metadata.navigation[runtimeVersion] = slugify(metadataForVersion.navigation);
    metadata.versions[runtimeVersion] = metadataForVersion.versions;
  });
  /* eslint-enable global-require */

  metadata.stable = semver.maxSatisfying(runtimeVersions.filter(version => version !== 'latest'), '*') || 'latest';

  return metadata;
};

module.exports = readMetadata;

import highlightStyles from './highlightStyles';
import React from 'react';
import stripIndent from 'common-tags/lib/stripIndent';
import SyntaxHighlighter from 'react-syntax-highlighter';
import { withStyles } from 'thenativeweb-ux';

const styles = theme => ({
  Codeblock: {
    '& pre, code': {
      fontFamily: theme.font.family.code,
      fontSize: '15px'
    },

    '& code': {
      maxWidth: theme.pageContent.maxWidth,
      marginTop: theme.space(3),
      marginBottom: theme.space(6),
      border: 0,
      display: 'block',
      color: '#abb2bf',
      background: '#282c34',
      padding: [ theme.space(2), theme.space(3) ],
      overflowX: 'auto'
    }
  }
});

const Code = ({ classes, children, language, className, type }) => {
  if (typeof children !== 'string') {
    throw new Error('Children must be a string.');
  }

  if (type === 'inline') {
    return <code>{ children }</code>;
  }

  let languageToHighlight = language;
  let preTag = 'pre';

  // If language has not been set explicitly and the className starts with
  // language we're inside of a Markdown codeblock. In this case we get
  // the langage from the className and skip the pre tag since it hast already
  // been generated by MDX.
  if (!language) {
    preTag = 'span';

    if (className && className.startsWith('language-')) {
      languageToHighlight = className.replace('language-', '');
    }
  }

  return (
    <span className={ classes.Codeblock }>
      <SyntaxHighlighter PreTag={ preTag } language={ languageToHighlight } style={ highlightStyles }>{ stripIndent(children) }</SyntaxHighlighter>
    </span>
  );
};

Code.defaultProps = {
  type: 'block'
};

export default withStyles(styles)(Code);
